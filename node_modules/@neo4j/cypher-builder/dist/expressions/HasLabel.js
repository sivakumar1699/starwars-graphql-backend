"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HasLabel = void 0;
const CypherASTNode_1 = require("../CypherASTNode");
const add_label_token_1 = require("../utils/add-label-token");
const escape_1 = require("../utils/escape");
/** Generates a predicate to check if a node has a label or a relationship has a type
 * @see {@link https://neo4j.com/docs/cypher-manual/current/clauses/where/#filter-on-node-label | Cypher Documentation}
 * @group Expressions
 * @example
 * ```cypher
 * MATCH(this)
 * WHERE this:MyNode
 * ```
 */
class HasLabel extends CypherASTNode_1.CypherASTNode {
    /**
     * @internal
     */
    constructor(node, expectedLabels) {
        super();
        this.validateLabelsInput(expectedLabels);
        this.node = node;
        this.expectedLabels = expectedLabels;
    }
    /** @internal */
    getCypher(env) {
        const nodeId = this.node.getCypher(env);
        const labelsStr = this.generateLabelExpressionStr(env);
        return `${nodeId}${labelsStr}`;
    }
    generateLabelExpressionStr(env) {
        if (Array.isArray(this.expectedLabels)) {
            const escapedLabels = this.expectedLabels.map((label) => (0, escape_1.escapeLabel)(label));
            return (0, add_label_token_1.addLabelToken)(env.config.labelOperator, ...escapedLabels);
        }
        else {
            return (0, add_label_token_1.addLabelToken)(env.config.labelOperator, this.expectedLabels.getCypher(env));
        }
    }
    validateLabelsInput(expectedLabels) {
        if (Array.isArray(expectedLabels) && expectedLabels.length === 0) {
            throw new Error("HasLabel needs at least 1 label");
        }
    }
}
exports.HasLabel = HasLabel;
