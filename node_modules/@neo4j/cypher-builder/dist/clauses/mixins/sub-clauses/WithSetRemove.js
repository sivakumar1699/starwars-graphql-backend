"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithSetRemove = void 0;
const compile_cypher_if_exists_1 = require("../../../utils/compile-cypher-if-exists");
const Remove_1 = require("../../sub-clauses/Remove");
const Set_1 = require("../../sub-clauses/Set");
const Mixin_1 = require("../Mixin");
class WithSetRemove extends Mixin_1.Mixin {
    /** Append a `SET` clause. Allowing to assign variable properties to values.
     * @see {@link https://neo4j.com/docs/cypher-manual/current/clauses/set/ | Cypher Documentation}
     */
    set(...params) {
        if (!this.subClauses) {
            this.subClauses = []; // Due to mixin wonkiness, we need to lazy initialize
        }
        if (this.lastSubClause instanceof Set_1.SetClause) {
            this.lastSubClause.addParams(...params);
        }
        else {
            this.subClauses.push(new Set_1.SetClause(this, params));
        }
        return this;
    }
    /** Append a `REMOVE` clause.
     * @see {@link https://neo4j.com/docs/cypher-manual/current/clauses/remove/ | Cypher Documentation}
     */
    remove(...properties) {
        if (!this.subClauses) {
            this.subClauses = []; // Due to mixin wonkiness, we need to lazy initialize
        }
        if (this.lastSubClause instanceof Remove_1.RemoveClause) {
            this.lastSubClause.addParams(...properties);
        }
        else {
            this.subClauses.push(new Remove_1.RemoveClause(this, properties));
        }
        return this;
    }
    compileSetCypher(env) {
        const subclausesCypher = (this.subClauses || [])
            .map((subclause) => {
            return (0, compile_cypher_if_exists_1.compileCypherIfExists)(subclause, env, { prefix: "\n" });
        })
            .join("");
        return subclausesCypher;
    }
    get lastSubClause() {
        if (!this.subClauses) {
            return undefined;
        }
        return this.subClauses[this.subClauses.length - 1];
    }
}
exports.WithSetRemove = WithSetRemove;
