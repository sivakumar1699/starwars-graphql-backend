"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Match_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionalMatch = exports.Match = void 0;
const compile_cypher_if_exists_1 = require("../utils/compile-cypher-if-exists");
const Clause_1 = require("./Clause");
const WithCall_1 = require("./mixins/clauses/WithCall");
const WithCallProcedure_1 = require("./mixins/clauses/WithCallProcedure");
const WithCreate_1 = require("./mixins/clauses/WithCreate");
const WithFinish_1 = require("./mixins/clauses/WithFinish");
const WithForeach_1 = require("./mixins/clauses/WithForeach");
const WithMerge_1 = require("./mixins/clauses/WithMerge");
const WithReturn_1 = require("./mixins/clauses/WithReturn");
const WithUnwind_1 = require("./mixins/clauses/WithUnwind");
const WithWith_1 = require("./mixins/clauses/WithWith");
const WithDelete_1 = require("./mixins/sub-clauses/WithDelete");
const WithOrder_1 = require("./mixins/sub-clauses/WithOrder");
const WithSetRemove_1 = require("./mixins/sub-clauses/WithSetRemove");
const WithWhere_1 = require("./mixins/sub-clauses/WithWhere");
const mixin_1 = require("./utils/mixin");
/**
 * @see {@link https://neo4j.com/docs/cypher-manual/current/clauses/match/ | Cypher Documentation}
 * @group Clauses
 */
let Match = Match_1 = class Match extends Clause_1.Clause {
    constructor(pattern) {
        super();
        this._optional = false;
        this.pattern = pattern;
    }
    /** Makes the clause an OPTIONAL MATCH
     * @see {@link https://neo4j.com/docs/cypher-manual/current/clauses/optional-match/ | Cypher Documentation}
     * @example
     * ```ts
     * new Cypher.Match(new Node({labels: ["Movie"]})).optional();
     * ```
     * _Cypher:_
     * ```cypher
     * OPTIONAL MATCH (this:Movie)
     * ```
     */
    optional() {
        this._optional = true;
        return this;
    }
    /** Add a {@link Match} clause
     * @see {@link https://neo4j.com/docs/cypher-manual/current/clauses/match/ | Cypher Documentation}
     */
    match(clauseOrPattern) {
        if (clauseOrPattern instanceof Match_1) {
            this.addNextClause(clauseOrPattern);
            return clauseOrPattern;
        }
        const matchClause = new Match_1(clauseOrPattern);
        this.addNextClause(matchClause);
        return matchClause;
    }
    /** Add an {@link OptionalMatch} clause
     * @see {@link https://neo4j.com/docs/cypher-manual/current/clauses/optional-match/ | Cypher Documentation}
     */
    optionalMatch(pattern) {
        const matchClause = new OptionalMatch(pattern);
        this.addNextClause(matchClause);
        return matchClause;
    }
    shortest(k) {
        this.shortestStatement = {
            type: "SHORTEST",
            k,
        };
        return this;
    }
    shortestGroups(k) {
        this.shortestStatement = {
            type: "SHORTEST_GROUPS",
            k,
        };
        return this;
    }
    allShortest() {
        this.shortestStatement = {
            type: "ALL SHORTEST",
        };
        return this;
    }
    any() {
        this.shortestStatement = {
            type: "ANY",
        };
        return this;
    }
    /** @internal */
    getCypher(env) {
        const patternCypher = this.pattern.getCypher(env);
        const whereCypher = (0, compile_cypher_if_exists_1.compileCypherIfExists)(this.whereSubClause, env, { prefix: "\n" });
        const nextClause = this.compileNextClause(env);
        const setCypher = this.compileSetCypher(env);
        const deleteCypher = (0, compile_cypher_if_exists_1.compileCypherIfExists)(this.deleteClause, env, { prefix: "\n" });
        const orderByCypher = (0, compile_cypher_if_exists_1.compileCypherIfExists)(this.orderByStatement, env, { prefix: "\n" });
        const optionalMatch = this._optional ? "OPTIONAL " : "";
        const shortestStatement = this.getShortestStatement();
        return `${optionalMatch}MATCH ${shortestStatement}${patternCypher}${whereCypher}${setCypher}${deleteCypher}${orderByCypher}${nextClause}`;
    }
    getShortestStatement() {
        if (!this.shortestStatement) {
            return "";
        }
        switch (this.shortestStatement.type) {
            case "SHORTEST":
                return `SHORTEST ${this.shortestStatement.k} `;
            case "ALL SHORTEST":
                return "ALL SHORTEST ";
            case "SHORTEST_GROUPS":
                return `SHORTEST ${this.shortestStatement.k} GROUPS `;
            case "ANY":
                return "ANY ";
        }
    }
};
exports.Match = Match;
exports.Match = Match = Match_1 = __decorate([
    (0, mixin_1.mixin)(WithReturn_1.WithReturn, WithWhere_1.WithWhere, WithSetRemove_1.WithSetRemove, WithWith_1.WithWith, WithDelete_1.WithDelete, WithUnwind_1.WithUnwind, WithCreate_1.WithCreate, WithMerge_1.WithMerge, WithFinish_1.WithFinish, WithCallProcedure_1.WithCallProcedure, WithCall_1.WithCall, WithOrder_1.WithOrder, WithForeach_1.WithForeach)
], Match);
/**
 * @see {@link https://neo4j.com/docs/cypher-manual/current/clauses/optional-match/ | Cypher Documentation}
 * @group Clauses
 */
class OptionalMatch extends Match {
    constructor(pattern) {
        super(pattern);
        this.optional();
    }
}
exports.OptionalMatch = OptionalMatch;
