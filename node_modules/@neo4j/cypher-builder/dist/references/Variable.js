"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NamedVariable = exports.Variable = void 0;
const ListIndex_1 = require("../expressions/list/ListIndex");
const escape_1 = require("../utils/escape");
const PropertyRef_1 = require("./PropertyRef");
/** Represents a variable
 * @group Variables
 */
class Variable {
    constructor() {
        this.prefix = "var";
    }
    /** Access individual property via the PropertyRef class */
    property(...path) {
        return new PropertyRef_1.PropertyRef(this, ...path);
    }
    /* Access individual elements via the ListIndex class, using the square bracket notation */
    index(index) {
        return new ListIndex_1.ListIndex(this, index);
    }
    /** @internal */
    getCypher(env) {
        const id = env.getReferenceId(this);
        return (0, escape_1.escapeVariable)(id);
    }
}
exports.Variable = Variable;
/**
 * Represents a variable with a explicit name
 * @group Variables
 */
class NamedVariable extends Variable {
    constructor(name) {
        super();
        this.id = name;
        this.prefix = "";
    }
}
exports.NamedVariable = NamedVariable;
