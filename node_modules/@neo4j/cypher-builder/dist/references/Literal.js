"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CypherFalse = exports.CypherTrue = exports.CypherNull = exports.Literal = void 0;
const escape_1 = require("../utils/escape");
/** Represents a literal value
 * @group Expressions
 */
class Literal {
    constructor(value) {
        this.value = value;
    }
    /** @internal */
    getCypher() {
        return this.formatLiteralValue(this.value);
    }
    formatLiteralValue(value) {
        if (typeof value === "string") {
            return `"${(0, escape_1.escapeLiteralString)(value)}"`;
        }
        if (value === null) {
            return "NULL";
        }
        if (Array.isArray(value)) {
            const serializedValues = value.map((v) => this.formatLiteralValue(v));
            return `[${serializedValues.join(", ")}]`;
        }
        return `${value}`;
    }
}
exports.Literal = Literal;
/** Represents a `NULL` literal value
 * @group Expressions
 */
exports.CypherNull = new Literal(null);
/** Represents a `true` literal value
 * @group Expressions
 */
exports.CypherTrue = new Literal(true);
/** Represents a `false` literal value
 * @group Expressions
 */
exports.CypherFalse = new Literal(false);
