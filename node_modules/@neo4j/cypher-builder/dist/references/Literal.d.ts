import type { CypherCompilable } from "../types";
/**
 * Possible types of a {@link Literal} expression
 * @group Expressions
 */
export type LiteralValue = string | number | boolean | null | Array<LiteralValue>;
/** Represents a literal value
 * @group Expressions
 */
export declare class Literal<T extends LiteralValue = LiteralValue> implements CypherCompilable {
    value: T;
    constructor(value: T);
    /** @internal */
    getCypher(): string;
    private formatLiteralValue;
}
/** Represents a `NULL` literal value
 * @group Expressions
 */
export declare const CypherNull: Literal<null>;
/** Represents a `true` literal value
 * @group Expressions
 */
export declare const CypherTrue: Literal<true>;
/** Represents a `false` literal value
 * @group Expressions
 */
export declare const CypherFalse: Literal<false>;
