"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Yield = void 0;
const Clause_1 = require("../clauses/Clause");
const WithCreate_1 = require("../clauses/mixins/clauses/WithCreate");
const WithMatch_1 = require("../clauses/mixins/clauses/WithMatch");
const WithMerge_1 = require("../clauses/mixins/clauses/WithMerge");
const WithReturn_1 = require("../clauses/mixins/clauses/WithReturn");
const WithUnwind_1 = require("../clauses/mixins/clauses/WithUnwind");
const WithWith_1 = require("../clauses/mixins/clauses/WithWith");
const WithDelete_1 = require("../clauses/mixins/sub-clauses/WithDelete");
const WithOrder_1 = require("../clauses/mixins/sub-clauses/WithOrder");
const WithSetRemove_1 = require("../clauses/mixins/sub-clauses/WithSetRemove");
const WithWhere_1 = require("../clauses/mixins/sub-clauses/WithWhere");
const Projection_1 = require("../clauses/sub-clauses/Projection");
const mixin_1 = require("../clauses/utils/mixin");
const Variable_1 = require("../references/Variable");
const as_array_1 = require("../utils/as-array");
const compile_cypher_if_exists_1 = require("../utils/compile-cypher-if-exists");
/** Yield statement after a Procedure CALL
 * @see {@link https://neo4j.com/docs/cypher-manual/current/clauses/call/#call-call-a-procedure-call-yield-star | Cypher Documentation}
 * @group Procedures
 */
let Yield = class Yield extends Clause_1.Clause {
    constructor(yieldColumns) {
        super();
        const columns = (0, as_array_1.asArray)(yieldColumns);
        this.projection = new YieldProjection(columns);
    }
    yield(...columns) {
        this.projection.addYieldColumns(columns);
        return this;
    }
    /** @internal */
    getCypher(env) {
        const yieldProjectionStr = this.projection.getCypher(env);
        const deleteCypher = (0, compile_cypher_if_exists_1.compileCypherIfExists)(this.deleteClause, env, { prefix: "\n" });
        const setCypher = this.compileSetCypher(env);
        const orderByCypher = (0, compile_cypher_if_exists_1.compileCypherIfExists)(this.orderByStatement, env, { prefix: "\n" });
        const whereStr = (0, compile_cypher_if_exists_1.compileCypherIfExists)(this.whereSubClause, env, {
            prefix: "\n",
        });
        const nextClause = this.compileNextClause(env);
        return `YIELD ${yieldProjectionStr}${whereStr}${setCypher}${deleteCypher}${orderByCypher}${nextClause}`;
    }
};
exports.Yield = Yield;
exports.Yield = Yield = __decorate([
    (0, mixin_1.mixin)(WithReturn_1.WithReturn, WithWhere_1.WithWhere, WithWith_1.WithWith, WithMatch_1.WithMatch, WithUnwind_1.WithUnwind, WithDelete_1.WithDelete, WithMerge_1.WithMerge, WithCreate_1.WithCreate, WithSetRemove_1.WithSetRemove, WithOrder_1.WithOrder)
], Yield);
class YieldProjection extends Projection_1.Projection {
    constructor(columns) {
        super([]);
        this.addYieldColumns(columns);
    }
    addYieldColumns(columns) {
        const parsedColumns = columns.map((c) => this.parseYieldColumn(c));
        this.addColumns(parsedColumns);
    }
    parseYieldColumn(input) {
        if (input === "*")
            return input;
        if (typeof input === "string")
            return this.createVariableForStrings(input);
        if (Array.isArray(input)) {
            return [this.createVariableForStrings(input[0]), input[1]];
        }
        return input;
    }
    createVariableForStrings(rawVar) {
        if (typeof rawVar === "string")
            return new Variable_1.NamedVariable(rawVar);
        return rawVar;
    }
}
