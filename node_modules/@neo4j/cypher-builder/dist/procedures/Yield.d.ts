import type { CypherEnvironment } from "../Environment";
import { Clause } from "../clauses/Clause";
import { WithCreate } from "../clauses/mixins/clauses/WithCreate";
import { WithMatch } from "../clauses/mixins/clauses/WithMatch";
import { WithMerge } from "../clauses/mixins/clauses/WithMerge";
import { WithReturn } from "../clauses/mixins/clauses/WithReturn";
import { WithUnwind } from "../clauses/mixins/clauses/WithUnwind";
import { WithWith } from "../clauses/mixins/clauses/WithWith";
import { WithDelete } from "../clauses/mixins/sub-clauses/WithDelete";
import { WithOrder } from "../clauses/mixins/sub-clauses/WithOrder";
import { WithSetRemove } from "../clauses/mixins/sub-clauses/WithSetRemove";
import { WithWhere } from "../clauses/mixins/sub-clauses/WithWhere";
import type { Literal } from "../references/Literal";
import type { Variable } from "../references/Variable";
/** @group Clauses */
export type YieldProjectionColumn<T extends string> = T | [T, Variable | Literal | string];
export interface Yield extends WithReturn, WithWhere, WithWith, WithMatch, WithUnwind, WithDelete, WithMerge, WithCreate, WithSetRemove, WithOrder {
}
/** Yield statement after a Procedure CALL
 * @see {@link https://neo4j.com/docs/cypher-manual/current/clauses/call/#call-call-a-procedure-call-yield-star | Cypher Documentation}
 * @group Procedures
 */
export declare class Yield<T extends string = string> extends Clause {
    private readonly projection;
    constructor(yieldColumns: Array<YieldProjectionColumn<T>>);
    yield(...columns: Array<YieldProjectionColumn<T>>): this;
    /** @internal */
    getCypher(env: CypherEnvironment): string;
}
