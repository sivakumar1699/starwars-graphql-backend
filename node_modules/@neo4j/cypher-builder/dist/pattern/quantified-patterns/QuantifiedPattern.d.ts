import type { CypherEnvironment } from "../../Environment";
import type { CypherCompilable } from "../../types";
import type { Pattern } from "../Pattern";
/** @group Patterns */
export type Quantifier = number | "*" | "+" | {
    min?: number;
    max?: number;
};
/** Represents a quantified path pattern as a {@link Pattern} with at least one relationship and a quantifier of the form `{1,2}`
 * @see {@link https://neo4j.com/docs/cypher-manual/current/patterns/variable-length-patterns/#quantified-path-patterns | Cypher Documentation}
 * @group Patterns
 */
export declare class QuantifiedPattern implements CypherCompilable {
    private readonly pattern;
    private readonly quantifier;
    constructor(pattern: Pattern, quantifier: Quantifier);
    /**
     * @internal
     */
    getCypher(env: CypherEnvironment): string;
    private generateQuantifierStr;
}
