"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryNodes = queryNodes;
exports.queryRelationships = queryRelationships;
const CypherProcedure_1 = require("../../../procedures/CypherProcedure");
const normalize_variable_1 = require("../../../utils/normalize-variable");
const VECTOR_NAMESPACE = "db.index.vector";
/** Returns all labels in the database
 * @see [Neo4j Documentation](https://neo4j.com/docs/operations-manual/current/reference/procedures/#procedure_db_index_vector_queryNodes)
 * @group Procedures
 */
function queryNodes(indexName, numberOfNearestNeighbours, query) {
    const procedureArgs = getVectorArguments(indexName, numberOfNearestNeighbours, query);
    return new CypherProcedure_1.CypherProcedure("queryNodes", procedureArgs, VECTOR_NAMESPACE);
}
/** Returns all labels in the database
 * @see [Neo4j Documentation](https://neo4j.com/docs/operations-manual/current/reference/procedures/#procedure_db.index.vector.queryRelationships)
 * @group Procedures
 */
function queryRelationships(indexName, numberOfNearestNeighbours, query) {
    const procedureArgs = getVectorArguments(indexName, numberOfNearestNeighbours, query);
    return new CypherProcedure_1.CypherProcedure("queryRelationships", procedureArgs, VECTOR_NAMESPACE);
}
function getVectorArguments(indexName, numberOfNearestNeighbours, query) {
    const indexNameVar = (0, normalize_variable_1.normalizeVariable)(indexName);
    const numberOfNearestNeighboursVar = (0, normalize_variable_1.normalizeVariable)(numberOfNearestNeighbours);
    const procedureArgs = [indexNameVar, numberOfNearestNeighboursVar, query];
    return procedureArgs;
}
