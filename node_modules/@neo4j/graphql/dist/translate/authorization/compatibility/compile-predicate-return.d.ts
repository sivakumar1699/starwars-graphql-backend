import type { PredicateReturn } from "../../../types";
import type { Neo4jGraphQLTranslationContext } from "../../../types/neo4j-graphql-translation-context";
type CompiledPredicateReturn = {
    cypher: string;
    params: Record<string, any>;
    subqueries?: string;
};
/**
 * Compiles Cypher, parameters and subqueries in the same Cypher Builder environment.
 *
 * The subqueries contain variables required by the predicate, and if they are not compiled with the same
 * environment, the predicate will be referring to non-existent variables and will re-assign variable from the subqueries.
 */
export declare function compilePredicateReturn({ predicateReturn, indexPrefix, context, }: {
    predicateReturn: PredicateReturn;
    indexPrefix: string | undefined;
    context: Neo4jGraphQLTranslationContext;
}): CompiledPredicateReturn;
export {};
//# sourceMappingURL=compile-predicate-return.d.ts.map