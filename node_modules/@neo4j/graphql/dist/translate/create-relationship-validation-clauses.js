"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRelationshipValidationClauses = createRelationshipValidationClauses;
const cypher_builder_1 = __importStar(require("@neo4j/cypher-builder"));
const constants_1 = require("../constants");
const utils_1 = require("../utils/utils");
const create_node_from_entity_1 = require("./queryAST/utils/create-node-from-entity");
const is_interface_entity_1 = require("./queryAST/utils/is-interface-entity");
const is_union_entity_1 = require("./queryAST/utils/is-union-entity");
/**
 * Generate cardinality validation as the legacy method create-relationship-validation-string.ts but it uses CypherBuilder and the Schema Model
 **/
function createRelationshipValidationClauses({ entity, context, varName, relationshipFieldNotOverwritable, }) {
    return (0, utils_1.filterTruthy)([...entity.relationships.values()].map((relationship) => {
        const target = relationship.target;
        if ((0, is_interface_entity_1.isInterfaceEntity)(target) || (0, is_union_entity_1.isUnionEntity)(target)) {
            return;
        }
        const relVarnameCypher = new cypher_builder_1.default.Relationship();
        const predicateAndMessage = getCardinalityPredicateAndMessage(relationship, entity, relationshipFieldNotOverwritable);
        if (!predicateAndMessage) {
            return;
        }
        const [predicate, errorMsg] = predicateAndMessage;
        const cVariable = new cypher_builder_1.NamedVariable("c");
        const predicateCypher = cypher_builder_1.default.not(predicate);
        const returnVar = relationship.isList ? cypher_builder_1.default.collect(cVariable) : cVariable;
        const match = new cypher_builder_1.default.Match(new cypher_builder_1.default.Pattern(varName)
            .related(relVarnameCypher, {
            type: relationship.type,
            direction: relationship.getCypherDirection(),
        })
            .to({ labels: (0, create_node_from_entity_1.getEntityLabels)(target, context) }))
            .with([cypher_builder_1.default.count(relVarnameCypher), cVariable])
            .where(cypher_builder_1.default.apoc.util.validatePredicate(predicateCypher, errorMsg))
            .return([returnVar, new cypher_builder_1.default.Variable()]);
        return new cypher_builder_1.default.Call(match).importWith(varName);
    }));
}
function getCardinalityPredicateAndMessage(relationship, entity, relationshipFieldNotOverwritable) {
    if ((relationship.isList && relationshipFieldNotOverwritable === relationship.name) ||
        (!relationship.isList && !relationship.isNullable)) {
        return [
            cypher_builder_1.default.eq(new cypher_builder_1.NamedVariable("c"), new cypher_builder_1.default.Literal(1)),
            `${constants_1.RELATIONSHIP_REQUIREMENT_PREFIX}${entity.name}.${relationship.name} required exactly once`,
        ];
    }
    else if (!relationship.isList && relationship.isNullable) {
        return [
            cypher_builder_1.default.lte(new cypher_builder_1.NamedVariable("c"), new cypher_builder_1.default.Literal(1)),
            `${constants_1.RELATIONSHIP_REQUIREMENT_PREFIX}${entity.name}.${relationship.name} must be less than or equal to one`,
        ];
    }
}
//# sourceMappingURL=create-relationship-validation-clauses.js.map