"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateRead = translateRead;
const debug_1 = __importDefault(require("debug"));
const constants_1 = require("../constants");
const QueryASTFactory_1 = require("./queryAST/factory/QueryASTFactory");
const build_clause_1 = require("./utils/build-clause");
const debug = (0, debug_1.default)(constants_1.DEBUG_TRANSLATE);
function translateRead({ context, entityAdapter, varName, }) {
    const { resolveTree } = context;
    const operationsTreeFactory = new QueryASTFactory_1.QueryASTFactory(context.schemaModel);
    const operationsTree = operationsTreeFactory.createQueryAST({
        resolveTree,
        entityAdapter,
        context,
        varName,
    });
    debug(operationsTree.print());
    const clause = operationsTree.build(context, varName);
    return (0, build_clause_1.buildClause)(clause, { context });
}
//# sourceMappingURL=translate-read.js.map