"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateTopLevelCypher = translateTopLevelCypher;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const debug_1 = __importDefault(require("debug"));
const constants_1 = require("../constants");
const get_entity_adapter_1 = require("../schema-model/utils/get-entity-adapter");
const apply_authentication_1 = require("./authorization/utils/apply-authentication");
const QueryASTContext_1 = require("./queryAST/ast/QueryASTContext");
const QueryASTFactory_1 = require("./queryAST/factory/QueryASTFactory");
const build_clause_1 = require("./utils/build-clause");
const debug = (0, debug_1.default)(constants_1.DEBUG_TRANSLATE);
function translateTopLevelCypher({ context, field, type, }) {
    const operation = context.schemaModel.operations[type];
    if (!operation) {
        throw new Error(`Failed to find operation ${type} in Schema Model.`);
    }
    const operationField = operation.findAttribute(field.fieldName);
    if (!operationField) {
        throw new Error(`Failed to find field ${field.fieldName} on operation ${type}.`);
    }
    const entity = context.schemaModel.entities.get(field.typeMeta.name);
    const annotation = operationField.annotations.authentication;
    if (annotation) {
        const targetOperations = type === "Query" ? ["READ"] : ["CREATE", "UPDATE", "DELETE"];
        (0, apply_authentication_1.applyAuthentication)({ context, annotation, targetOperations });
    }
    const { resolveTree } = context;
    // entity could be undefined as the field could be a scalar
    const entityAdapter = entity && (0, get_entity_adapter_1.getEntityAdapter)(entity);
    const queryAST = new QueryASTFactory_1.QueryASTFactory(context.schemaModel).createQueryAST({
        resolveTree,
        entityAdapter,
        context,
        varName: "this",
    });
    const queryASTEnv = new QueryASTContext_1.QueryASTEnv();
    const targetNode = new cypher_builder_1.default.NamedNode("this");
    const queryASTContext = new QueryASTContext_1.QueryASTContext({
        target: targetNode,
        env: queryASTEnv,
        neo4jGraphQLContext: context,
        returnVariable: targetNode,
        shouldCollect: false,
        shouldDistinct: false,
    });
    debug(queryAST.print());
    const queryASTResult = queryAST.transpile(queryASTContext);
    const projectionStatements = queryASTResult.clauses.length
        ? cypher_builder_1.default.utils.concat(...queryASTResult.clauses)
        : new cypher_builder_1.default.Return(new cypher_builder_1.default.Literal("Query cannot conclude with CALL"));
    return (0, build_clause_1.buildClause)(projectionStatements, { context });
}
//# sourceMappingURL=translate-top-level-cypher.js.map