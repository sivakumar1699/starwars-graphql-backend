"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapSubqueriesInCypherCalls = wrapSubqueriesInCypherCalls;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const utils_1 = require("../../../utils/utils");
/** Gets subqueries from fields and map these to Call statements with inner target */
function wrapSubqueriesInCypherCalls(context, fields, withArgs) {
    return (0, utils_1.filterTruthy)(fields.flatMap((f) => {
        return f.getSubqueries(context);
    })).map((sq) => {
        const call = new cypher_builder_1.default.Call(sq);
        if (withArgs) {
            call.importWith(...withArgs);
        }
        return call;
    });
}
//# sourceMappingURL=wrap-subquery-in-calls.js.map