"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimestampField = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const AttributeType_1 = require("../../../../schema-model/attribute/AttributeType");
const InputField_1 = require("./InputField");
class TimestampField extends InputField_1.InputField {
    constructor(name, attribute, attachedTo = "node") {
        super(name, attachedTo);
        this.attribute = attribute;
    }
    getChildren() {
        return [];
    }
    print() {
        return `${super.print()} <${this.name}>`;
    }
    getSetParams(queryASTContext) {
        const target = this.getTarget(queryASTContext);
        const relatedCypherExpression = this.GetFunctionForTemporalType(this.attribute.type.name);
        const setParam = [target.property(this.attribute.databaseName), relatedCypherExpression];
        return [setParam];
    }
    getSetClause() {
        return [];
    }
    GetFunctionForTemporalType(type) {
        switch (type) {
            case AttributeType_1.Neo4jGraphQLTemporalType.DateTime:
                return cypher_builder_1.default.datetime();
            case AttributeType_1.Neo4jGraphQLTemporalType.LocalDateTime:
                return cypher_builder_1.default.localdatetime();
            case AttributeType_1.Neo4jGraphQLTemporalType.Time:
                return cypher_builder_1.default.time();
            case AttributeType_1.Neo4jGraphQLTemporalType.LocalTime:
                return cypher_builder_1.default.localtime();
            default: {
                throw new Error(`Transpile error: Expected type to one of:
                [ 
                    ${AttributeType_1.Neo4jGraphQLTemporalType.DateTime},
                    ${AttributeType_1.Neo4jGraphQLTemporalType.LocalDateTime}, 
                    ${AttributeType_1.Neo4jGraphQLTemporalType.Time},
                    ${AttributeType_1.Neo4jGraphQLTemporalType.LocalTime}
                ]
                but found ${type} instead`);
            }
        }
    }
}
exports.TimestampField = TimestampField;
//# sourceMappingURL=TimestampField.js.map