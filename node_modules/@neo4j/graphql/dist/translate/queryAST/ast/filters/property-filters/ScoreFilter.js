"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScoreFilter = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const Filter_1 = require("../Filter");
/** A property which comparison has already been parsed into a Param */
class ScoreFilter extends Filter_1.Filter {
    constructor({ scoreVariable, min, max }) {
        super();
        this.scoreVariable = scoreVariable;
        this.min = min;
        this.max = max;
    }
    getChildren() {
        return [];
    }
    getPredicate(_queryASTContext) {
        const predicates = [];
        if (this.max || this.max === 0) {
            const maxPredicate = cypher_builder_1.default.lte(this.scoreVariable, new cypher_builder_1.default.Param(this.max));
            predicates.push(maxPredicate);
        }
        if (this.min || this.min === 0) {
            const minPredicate = cypher_builder_1.default.gte(this.scoreVariable, new cypher_builder_1.default.Param(this.min));
            predicates.push(minPredicate);
        }
        return cypher_builder_1.default.and(...predicates);
    }
}
exports.ScoreFilter = ScoreFilter;
//# sourceMappingURL=ScoreFilter.js.map