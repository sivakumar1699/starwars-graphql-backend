"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CountFilter = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const AggregationFilter_1 = require("./AggregationFilter");
class CountFilter extends AggregationFilter_1.AggregationFilter {
    constructor({ operator, comparisonValue, attachedTo = "node", relationship, isDeprecated, }) {
        super(relationship, isDeprecated, attachedTo);
        this.comparisonValue = comparisonValue;
        this.operator = operator;
    }
    getChildren() {
        return [];
    }
    print() {
        return `${super.print()} <${this.operator}>`;
    }
    getSubqueryReturnVariable(queryASTContext) {
        if (!queryASTContext.hasTarget()) {
            throw new Error("No parent node found!");
        }
        const target = this.getTarget(queryASTContext);
        return this.createBaseOperation({
            operator: this.operator,
            expr: cypher_builder_1.default.count(target),
            param: new cypher_builder_1.default.Param(this.comparisonValue),
        });
    }
    getTarget(queryASTContext) {
        const target = this.attachedTo === "node" ? queryASTContext.target : queryASTContext.relationship;
        if (!target) {
            throw new Error("No target found");
        }
        return target;
    }
}
exports.CountFilter = CountFilter;
//# sourceMappingURL=CountFilter.js.map