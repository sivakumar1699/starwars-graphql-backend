"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CypherFilter = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const create_comparison_operator_1 = require("../../../utils/create-comparison-operator");
const Filter_1 = require("../Filter");
const coalesce_if_needed_1 = require("../utils/coalesce-if-needed");
const create_date_time_operation_1 = require("../utils/create-date-time-operation");
const create_duration_operation_1 = require("../utils/create-duration-operation");
const create_point_operation_1 = require("../utils/create-point-operation");
const create_time_operation_1 = require("../utils/create-time-operation");
/** A property which comparison has already been parsed into a Param */
class CypherFilter extends Filter_1.Filter {
    constructor({ selection, attribute, operator, comparisonValue, checkIsNotNull = false, }) {
        super();
        this.returnVariable = new cypher_builder_1.default.Variable();
        this.selection = selection;
        this.attribute = attribute;
        this.operator = operator;
        this.comparisonValue = comparisonValue;
        this.checkIsNotNull = checkIsNotNull;
    }
    getChildren() {
        return [this.selection];
    }
    print() {
        return `${super.print()} [${this.attribute.name}] <${this.operator}>`;
    }
    getSubqueries(context) {
        const { selection: cypherSubquery, nestedContext } = this.selection.apply(context);
        const nestedReturnVariable = this.attribute.typeHelper.isList()
            ? cypher_builder_1.default.collect(nestedContext.returnVariable)
            : nestedContext.returnVariable;
        const clause = cypherSubquery.return([nestedReturnVariable, this.returnVariable]);
        return [clause];
    }
    getPredicate(_queryASTContext) {
        const operation = this.createBaseOperation({
            operator: this.operator,
            property: this.returnVariable,
            param: this.comparisonValue,
        });
        if (this.checkIsNotNull) {
            return cypher_builder_1.default.and(cypher_builder_1.default.isNotNull(this.comparisonValue), cypher_builder_1.default.isNotNull(this.returnVariable), operation);
        }
        return operation;
    }
    /** Returns the default operation for a given filter */
    createBaseOperation({ operator, property, param, }) {
        const coalesceProperty = (0, coalesce_if_needed_1.coalesceValueIfNeeded)(this.attribute, property);
        // This could be solved with specific a specific CypherDurationFilter but
        // we need to use the return variable for the cypher subquery.
        // To allow us to extend the DurationFilter class with a CypherDurationFilter class
        // we would need to have a way to provide the return variable
        // to the PropertyFilter's getPropertyRef method.
        if (this.attribute.typeHelper.isDuration()) {
            return (0, create_duration_operation_1.createDurationOperation)({
                operator,
                property: coalesceProperty,
                param: this.comparisonValue,
            });
        }
        if (this.attribute.typeHelper.isSpatial()) {
            return (0, create_point_operation_1.createPointOperation)({
                operator,
                property: coalesceProperty,
                param: this.comparisonValue,
                attribute: this.attribute,
            });
        }
        if (this.attribute.typeHelper.isDateTime()) {
            return (0, create_date_time_operation_1.createDateTimeOperation)({
                operator,
                property: coalesceProperty,
                param: this.comparisonValue,
                attribute: this.attribute,
            });
        }
        if (this.attribute.typeHelper.isTime()) {
            return (0, create_time_operation_1.createTimeOperation)({
                operator,
                property: coalesceProperty,
                param: this.comparisonValue,
                attribute: this.attribute,
            });
        }
        return (0, create_comparison_operator_1.createComparisonOperation)({ operator, property: coalesceProperty, param });
    }
}
exports.CypherFilter = CypherFilter;
//# sourceMappingURL=CypherFilter.js.map