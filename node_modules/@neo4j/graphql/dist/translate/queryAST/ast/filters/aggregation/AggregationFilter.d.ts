import Cypher from "@neo4j/cypher-builder";
import type { RelationshipAdapter } from "../../../../../schema-model/relationship/model-adapters/RelationshipAdapter";
import type { AggregationLogicalOperator } from "../../../factory/parsers/parse-where-field";
import type { QueryASTContext } from "../../QueryASTContext";
import { Filter } from "../Filter";
export declare abstract class AggregationFilter extends Filter {
    protected subqueryReturnVariable: Cypher.Variable | undefined;
    protected relationship: RelationshipAdapter;
    protected isDeprecated: boolean;
    protected attachedTo: "node" | "relationship";
    constructor(relationship: RelationshipAdapter, isDeprecated: boolean | undefined, attachedTo: "node" | "relationship");
    getSubqueries(context: QueryASTContext): Cypher.Clause[];
    getPredicate(): Cypher.Predicate | undefined;
    protected createBaseOperation({ operator, expr, param, }: {
        operator: AggregationLogicalOperator;
        expr: Cypher.Expr;
        param: Cypher.Expr;
    }): Cypher.ComparisonOp;
    protected abstract getSubqueryReturnVariable(queryASTContext: QueryASTContext): Cypher.Predicate | undefined;
    private shouldApplyDistinct;
}
//# sourceMappingURL=AggregationFilter.d.ts.map