import Cypher from "@neo4j/cypher-builder";
import type { AttributeAdapter } from "../../../../../schema-model/attribute/model-adapters/AttributeAdapter";
import type { QueryASTContext } from "../../QueryASTContext";
import type { QueryASTNode } from "../../QueryASTNode";
import type { CustomCypherSelection } from "../../selection/CustomCypherSelection";
import type { FilterOperator } from "../Filter";
import { Filter } from "../Filter";
/** A property which comparison has already been parsed into a Param */
export declare class CypherFilter extends Filter {
    private returnVariable;
    private attribute;
    private selection;
    private operator;
    protected comparisonValue: Cypher.Param | Cypher.Variable | Cypher.Property;
    private checkIsNotNull;
    constructor({ selection, attribute, operator, comparisonValue, checkIsNotNull, }: {
        selection: CustomCypherSelection;
        attribute: AttributeAdapter;
        operator: FilterOperator;
        comparisonValue: Cypher.Param | Cypher.Variable | Cypher.Property;
        checkIsNotNull?: boolean;
    });
    getChildren(): QueryASTNode[];
    print(): string;
    getSubqueries(context: QueryASTContext): Cypher.Clause[];
    getPredicate(_queryASTContext: QueryASTContext): Cypher.Predicate;
    /** Returns the default operation for a given filter */
    private createBaseOperation;
}
//# sourceMappingURL=CypherFilter.d.ts.map