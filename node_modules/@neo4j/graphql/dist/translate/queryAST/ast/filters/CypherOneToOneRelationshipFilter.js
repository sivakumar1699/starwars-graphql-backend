"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CypherOneToOneRelationshipFilter = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const Filter_1 = require("./Filter");
class CypherOneToOneRelationshipFilter extends Filter_1.Filter {
    constructor({ selection, attribute, operator, isNull, returnVariable, }) {
        super();
        this.targetNodeFilters = [];
        this.selection = selection;
        this.attribute = attribute;
        this.isNull = isNull;
        this.operator = operator;
        this.returnVariable = returnVariable;
    }
    getChildren() {
        return [...this.targetNodeFilters, this.selection];
    }
    addTargetNodeFilter(...filter) {
        this.targetNodeFilters.push(...filter);
    }
    print() {
        return `${super.print()} [${this.attribute.name}] <${this.operator}>`;
    }
    getSubqueries(context) {
        const { selection, nestedContext } = this.selection.apply(context);
        const cypherSubquery = selection.return([
            cypher_builder_1.default.head(cypher_builder_1.default.collect(nestedContext.returnVariable)),
            this.returnVariable,
        ]);
        return [cypherSubquery];
    }
    getPredicate(queryASTContext) {
        const context = queryASTContext.setTarget(this.returnVariable);
        return this.createRelationshipOperation(context);
    }
    createRelationshipOperation(queryASTContext) {
        const targetNodePredicates = this.targetNodeFilters.map((c) => c.getPredicate(queryASTContext));
        const innerPredicate = cypher_builder_1.default.and(...targetNodePredicates);
        if (this.isNull) {
            return cypher_builder_1.default.and(innerPredicate, cypher_builder_1.default.isNull(this.returnVariable));
        }
        return innerPredicate;
    }
}
exports.CypherOneToOneRelationshipFilter = CypherOneToOneRelationshipFilter;
//# sourceMappingURL=CypherOneToOneRelationshipFilter.js.map