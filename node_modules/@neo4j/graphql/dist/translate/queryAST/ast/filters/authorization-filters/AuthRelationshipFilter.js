"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthRelationshipFilter = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const create_node_from_entity_1 = require("../../../utils/create-node-from-entity");
const RelationshipFilter_1 = require("../RelationshipFilter");
class AuthRelationshipFilter extends RelationshipFilter_1.RelationshipFilter {
    getPredicate(queryASTContext) {
        if (this.subqueryPredicate) {
            return this.subqueryPredicate;
        }
        const nestedContext = this.getNestedContext(queryASTContext);
        const pattern = new cypher_builder_1.default.Pattern(nestedContext.source)
            .related({
            type: this.relationship.type,
            direction: this.relationship.getCypherDirection(),
        })
            .to(nestedContext.target, {
            labels: (0, create_node_from_entity_1.getEntityLabels)(this.target, queryASTContext.neo4jGraphQLContext),
        });
        const predicate = this.createRelationshipOperation(pattern, nestedContext);
        return predicate;
    }
    createRelationshipOperation(pattern, queryASTContext) {
        const predicates = this.targetNodeFilters.map((c) => c.getPredicate(queryASTContext));
        const innerPredicate = cypher_builder_1.default.and(...predicates);
        if (!innerPredicate) {
            return;
        }
        switch (this.operator) {
            case "ALL": {
                const match = new cypher_builder_1.default.Match(pattern).where(innerPredicate);
                const negativeMatch = new cypher_builder_1.default.Match(pattern).where(cypher_builder_1.default.not(innerPredicate));
                // Testing "ALL" requires testing that at least one element exists and that no elements not matching the filter exists
                return cypher_builder_1.default.and(new cypher_builder_1.default.Exists(match), cypher_builder_1.default.not(new cypher_builder_1.default.Exists(negativeMatch)));
            }
            case "SINGLE": {
                return this.getSingleRelationshipOperation({
                    pattern,
                    queryASTContext,
                    innerPredicate,
                });
            }
            case "NONE":
            case "SOME": {
                const matchClause = new cypher_builder_1.default.Match(pattern).where(innerPredicate);
                const existsPredicate = new cypher_builder_1.default.Exists(matchClause);
                return existsPredicate;
            }
        }
    }
}
exports.AuthRelationshipFilter = AuthRelationshipFilter;
//# sourceMappingURL=AuthRelationshipFilter.js.map