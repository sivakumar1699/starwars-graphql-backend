"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthConnectionFilter = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const ConnectionFilter_1 = require("../ConnectionFilter");
class AuthConnectionFilter extends ConnectionFilter_1.ConnectionFilter {
    createRelationshipOperation(pattern, queryASTContext) {
        const connectionFilter = this.innerFilters.map((c) => c.getPredicate(queryASTContext));
        const labelPredicate = this.getLabelPredicate(queryASTContext);
        const innerPredicate = cypher_builder_1.default.and(...connectionFilter, labelPredicate);
        const useExist = queryASTContext.neo4jGraphQLContext.neo4jDatabaseInfo?.gte("5.0");
        if (!innerPredicate)
            return undefined;
        switch (this.operator) {
            case "ALL": {
                if (!useExist) {
                    const patternComprehension = new cypher_builder_1.default.PatternComprehension(pattern).map(new cypher_builder_1.default.Literal(1));
                    const sizeFunction = cypher_builder_1.default.size(patternComprehension.where(cypher_builder_1.default.not(innerPredicate)));
                    return cypher_builder_1.default.eq(sizeFunction, new cypher_builder_1.default.Literal(0));
                }
                const match = new cypher_builder_1.default.Match(pattern).where(innerPredicate);
                const negativeMatch = new cypher_builder_1.default.Match(pattern).where(cypher_builder_1.default.not(innerPredicate));
                // Testing "ALL" requires testing that at least one element exists and that no elements not matching the filter exists
                return cypher_builder_1.default.and(new cypher_builder_1.default.Exists(match), cypher_builder_1.default.not(new cypher_builder_1.default.Exists(negativeMatch)));
            }
            case "SINGLE": {
                return this.createSingleRelationshipOperation(pattern, queryASTContext, innerPredicate);
            }
            default: {
                if (!this.relationship.isList) {
                    return this.createSingleRelationshipOperation(pattern, queryASTContext, innerPredicate);
                }
                if (!useExist) {
                    const patternComprehension = new cypher_builder_1.default.PatternComprehension(pattern).map(new cypher_builder_1.default.Literal(1));
                    const sizeFunction = cypher_builder_1.default.size(patternComprehension.where(innerPredicate));
                    return cypher_builder_1.default.gt(sizeFunction, new cypher_builder_1.default.Literal(0));
                }
                const match = new cypher_builder_1.default.Match(pattern).where(innerPredicate);
                return new cypher_builder_1.default.Exists(match);
            }
        }
    }
}
exports.AuthConnectionFilter = AuthConnectionFilter;
//# sourceMappingURL=AuthConnectionFilter.js.map