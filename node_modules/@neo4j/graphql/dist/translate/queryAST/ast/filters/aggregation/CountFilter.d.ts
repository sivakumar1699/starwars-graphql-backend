import Cypher from "@neo4j/cypher-builder";
import type { RelationshipAdapter } from "../../../../../schema-model/relationship/model-adapters/RelationshipAdapter";
import type { AggregationLogicalOperator } from "../../../factory/parsers/parse-where-field";
import type { QueryASTContext } from "../../QueryASTContext";
import type { QueryASTNode } from "../../QueryASTNode";
import { AggregationFilter } from "./AggregationFilter";
export declare class CountFilter extends AggregationFilter {
    protected comparisonValue: unknown;
    protected operator: AggregationLogicalOperator;
    constructor({ operator, comparisonValue, attachedTo, relationship, isDeprecated, }: {
        operator: AggregationLogicalOperator;
        comparisonValue: unknown;
        attachedTo?: "node" | "relationship";
        relationship: RelationshipAdapter;
        isDeprecated?: boolean;
    });
    getChildren(): QueryASTNode[];
    print(): string;
    getSubqueryReturnVariable(queryASTContext: QueryASTContext): Cypher.Predicate | undefined;
    protected getTarget(queryASTContext: QueryASTContext<Cypher.Node>): Cypher.Node | Cypher.Relationship;
}
//# sourceMappingURL=CountFilter.d.ts.map