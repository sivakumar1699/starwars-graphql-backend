"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorSelection = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const map_labels_with_context_1 = require("../../../../schema-model/utils/map-labels-with-context");
const QueryASTContext_1 = require("../QueryASTContext");
const EntitySelection_1 = require("./EntitySelection");
class VectorSelection extends EntitySelection_1.EntitySelection {
    constructor({ target, vectorOptions, scoreVariable, settings, }) {
        super();
        this.target = target;
        this.vectorOptions = vectorOptions;
        this.scoreVariable = scoreVariable;
        this.settings = settings;
    }
    apply(context) {
        const node = new cypher_builder_1.default.Node();
        const vectorParam = new cypher_builder_1.default.Param(this.vectorOptions.vector);
        const phraseParam = new cypher_builder_1.default.Param(this.vectorOptions.phrase);
        const indexName = new cypher_builder_1.default.Literal(this.vectorOptions.index.indexName);
        let vectorClause = undefined;
        // Different cases:
        // 1. Vector index without phrase, where the input is a List of Floats
        if (this.vectorOptions.vector) {
            vectorClause = cypher_builder_1.default.db.index.vector
                .queryNodes(indexName, 4, vectorParam)
                .yield(["node", node], ["score", this.scoreVariable]);
        }
        // 2. Vector index with phrase, where the input is a String, and there is a configured provider. We're going to use
        //    the GenAI plugin for this.
        if (this.vectorOptions.phrase && this.vectorOptions.index.provider) {
            if (!this.settings || !this.settings[this.vectorOptions.index.provider]) {
                throw new Error(`Missing settings for provider ${this.vectorOptions.index.provider}. Please check your configuration.`);
            }
            const providerSettings = this.settings[this.vectorOptions.index.provider];
            const asQueryVector = new cypher_builder_1.default.Variable();
            const vectorProcedure = cypher_builder_1.default.db.index.vector.queryNodes(indexName, 4, asQueryVector);
            const encodeFunction = cypher_builder_1.default.genai.vector.encode(phraseParam, this.vectorOptions.index.provider, providerSettings);
            vectorClause = new cypher_builder_1.default.With([encodeFunction, asQueryVector])
                .callProcedure(vectorProcedure)
                .yield(["node", node], ["score", this.scoreVariable]);
        }
        // 3. Vector index with phrase, where the input is a String, and there is no configured provider (and there is a callback).
        //    We're going to skip the use of the GenAI plugin for this.
        if (!vectorClause) {
            // This shouldn't occur. Probably requires a refactor so this code path is never reached.
            throw new Error("Unsupported vector index configuration");
        }
        const expectedLabels = (0, map_labels_with_context_1.mapLabelsWithContext)(this.target.getLabels(), context.neo4jGraphQLContext);
        const whereOperators = expectedLabels.map((label) => {
            return cypher_builder_1.default.in(new cypher_builder_1.default.Param(label), cypher_builder_1.default.labels(node));
        });
        vectorClause.where(cypher_builder_1.default.and(...whereOperators));
        return {
            selection: vectorClause,
            nestedContext: new QueryASTContext_1.QueryASTContext({
                target: node,
                neo4jGraphQLContext: context.neo4jGraphQLContext,
                returnVariable: context.returnVariable,
                env: context.env,
                shouldCollect: context.shouldCollect,
            }),
        };
    }
}
exports.VectorSelection = VectorSelection;
//# sourceMappingURL=VectorSelection.js.map