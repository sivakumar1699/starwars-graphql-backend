"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeSelection = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const create_node_from_entity_1 = require("../../utils/create-node-from-entity");
const QueryASTContext_1 = require("../QueryASTContext");
const EntitySelection_1 = require("./EntitySelection");
class NodeSelection extends EntitySelection_1.EntitySelection {
    constructor({ target, alias, optional = false, useContextTarget = false, }) {
        super();
        this.target = target;
        this.alias = alias;
        this.optional = optional;
        this.useContextTarget = useContextTarget;
    }
    apply(context) {
        let node;
        let matchPattern;
        // useContextTarget is used when you have to select a node already matched,
        // this could be simplified a lot, it's currently not possible as there is no way to build a Cypher.Node from an existing Cypher.Node.
        if (this.useContextTarget) {
            if (!context.hasTarget()) {
                throw new Error("No target found in the context");
            }
            node = context.target;
            matchPattern = new cypher_builder_1.default.Pattern(node);
        }
        else {
            node = (0, create_node_from_entity_1.createNode)(this.alias);
            matchPattern = new cypher_builder_1.default.Pattern(node, {
                labels: (0, create_node_from_entity_1.getEntityLabels)(this.target, context.neo4jGraphQLContext),
            });
        }
        const match = new cypher_builder_1.default.Match(matchPattern ?? node);
        if (this.optional) {
            match.optional();
        }
        return {
            selection: match,
            nestedContext: new QueryASTContext_1.QueryASTContext({
                target: node,
                neo4jGraphQLContext: context.neo4jGraphQLContext,
                returnVariable: context.returnVariable,
                env: context.env,
                shouldCollect: context.shouldCollect,
            }),
        };
    }
}
exports.NodeSelection = NodeSelection;
//# sourceMappingURL=NodeSelection.js.map