"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationshipSelection = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const context_has_target_1 = require("../../utils/context-has-target");
const create_node_from_entity_1 = require("../../utils/create-node-from-entity");
const EntitySelection_1 = require("./EntitySelection");
class RelationshipSelection extends EntitySelection_1.EntitySelection {
    constructor({ relationship, alias, targetOverride, optional, }) {
        super();
        this.relationship = relationship;
        this.alias = alias;
        this.targetOverride = targetOverride;
        this.optional = optional ?? false;
    }
    apply(context) {
        if (!(0, context_has_target_1.hasTarget)(context))
            throw new Error("No parent node over a nested relationship match!");
        const relVar = new cypher_builder_1.default.Relationship();
        const relationshipTarget = this.targetOverride ?? this.relationship.target;
        const targetNode = (0, create_node_from_entity_1.createNode)(this.alias);
        const labels = (0, create_node_from_entity_1.getEntityLabels)(relationshipTarget, context.neo4jGraphQLContext);
        const relDirection = this.relationship.getCypherDirection();
        const pattern = new cypher_builder_1.default.Pattern(context.target)
            .related(relVar, { direction: relDirection, type: this.relationship.type })
            .to(targetNode, { labels });
        // NOTE: Direction not passed (can we remove it from context?)
        const nestedContext = context.push({ target: targetNode, relationship: relVar });
        const match = new cypher_builder_1.default.Match(pattern);
        if (this.optional) {
            match.optional();
        }
        return {
            nestedContext: nestedContext,
            selection: match,
        };
    }
}
exports.RelationshipSelection = RelationshipSelection;
//# sourceMappingURL=RelationshipSelection.js.map