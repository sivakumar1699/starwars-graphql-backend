import { GraphQLNonNull, type GraphQLResolveInfo } from "graphql";
import type { SchemaComposer } from "graphql-compose";
import type { EntityAdapter } from "../../../schema-model/entity/EntityAdapter";
import type { Neo4jGraphQLComposedContext } from "../composition/wrap-query-and-mutation";
export declare function findResolver({ entityAdapter, composer, isLimitRequired, }: {
    entityAdapter: EntityAdapter;
    composer: SchemaComposer;
    isLimitRequired: boolean | undefined;
}): {
    type: string;
    resolve: (_root: any, args: any, context: Neo4jGraphQLComposedContext, info: GraphQLResolveInfo) => Promise<any[]>;
    args: {
        where: string;
        limit: import("graphql").GraphQLScalarType<number, number> | GraphQLNonNull<import("graphql").GraphQLScalarType<number, number>>;
        offset: import("graphql").GraphQLScalarType<number, number>;
    };
};
//# sourceMappingURL=read.d.ts.map