"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterByAuthorizationRules = filterByAuthorizationRules;
const filter_by_values_1 = require("../../../../../translate/authorization/utils/filter-by-values");
const multiple_conditions_aggregation_map_1 = require("../utils/multiple-conditions-aggregation-map");
const filter_by_properties_1 = require("./filter-by-properties");
function filterByAuthorizationRules({ entityAdapter, where, event, context, }) {
    const results = Object.entries(where).map(([wherePropertyKey, wherePropertyValue]) => {
        if (Object.keys(multiple_conditions_aggregation_map_1.multipleConditionsAggregationMap).includes(wherePropertyKey)) {
            const comparisonResultsAggregationFn = multiple_conditions_aggregation_map_1.multipleConditionsAggregationMap[wherePropertyKey];
            let comparisonResults;
            if (wherePropertyKey === "NOT") {
                comparisonResults = filterByAuthorizationRules({
                    entityAdapter,
                    where: wherePropertyValue,
                    event,
                    context,
                });
            }
            else {
                comparisonResults = wherePropertyValue.map((whereCl) => {
                    return filterByAuthorizationRules({
                        entityAdapter,
                        where: whereCl,
                        event,
                        context,
                    });
                });
            }
            if (!comparisonResultsAggregationFn(comparisonResults)) {
                return false;
            }
        }
        if (wherePropertyKey === "node") {
            switch (event.event) {
                case "create":
                    return (0, filter_by_properties_1.filterByProperties)({
                        attributes: entityAdapter.attributes,
                        whereProperties: wherePropertyValue,
                        receivedProperties: event.properties.new,
                    });
                case "update":
                case "delete":
                    return (0, filter_by_properties_1.filterByProperties)({
                        attributes: entityAdapter.attributes,
                        whereProperties: wherePropertyValue,
                        receivedProperties: event.properties.old,
                    });
            }
        }
        if (wherePropertyKey === "jwt") {
            const { jwt, claims } = context.authorization;
            if (!jwt) {
                throw new Error("JWT Token must be present.");
            }
            return (0, filter_by_values_1.filterByValues)(wherePropertyValue, jwt, claims);
        }
        return true;
    });
    return multiple_conditions_aggregation_map_1.multipleConditionsAggregationMap.AND(results);
}
//# sourceMappingURL=filter-by-authorization-rules.js.map