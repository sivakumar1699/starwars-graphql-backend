"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapSubscription = void 0;
const debug_1 = __importDefault(require("debug"));
const get_authorization_context_1 = require("./utils/get-authorization-context");
const constants_1 = require("../../../constants");
const debug_graphql_resolve_info_1 = require("../../../debug/debug-graphql-resolve-info");
const debug_object_1 = require("../../../debug/debug-object");
const debug = (0, debug_1.default)(constants_1.DEBUG_GRAPHQL);
const wrapSubscription = (resolverArgs) => (next) => async (root, args, context, info) => {
    (0, debug_graphql_resolve_info_1.debugGraphQLResolveInfo)(debug, info);
    (0, debug_object_1.debugObject)(debug, "incoming context", context);
    const subscriptionsEngine = resolverArgs.subscriptionsEngine;
    const schemaModel = resolverArgs.schemaModel;
    const authorization = resolverArgs.authorization;
    const jwtClaimsMap = resolverArgs.jwtPayloadFieldsMap;
    const authorizationContext = await (0, get_authorization_context_1.getAuthorizationContext)(context?.connectionParams || {}, authorization, jwtClaimsMap);
    if (!context.connectionParams?.jwt) {
        context.connectionParams = { ...context.connectionParams, jwt: authorizationContext.jwt };
    }
    const internalContext = {
        authorization: authorizationContext,
        schemaModel,
        subscriptionsEngine,
    };
    return next(root, args, { ...context, ...internalContext }, info);
};
exports.wrapSubscription = wrapSubscription;
//# sourceMappingURL=wrap-subscription.js.map