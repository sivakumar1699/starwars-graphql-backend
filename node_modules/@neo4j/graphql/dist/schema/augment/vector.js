"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.augmentVectorSchema = augmentVectorSchema;
const graphql_1 = require("graphql");
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const vector_input_1 = require("../generation/vector-input");
const vector_1 = require("../resolvers/query/vector");
function augmentVectorSchema({ composer, concreteEntityAdapter, complexityEstimatorHelper, features, }) {
    if (!concreteEntityAdapter.annotations.vector) {
        return;
    }
    (0, vector_input_1.withVectorWhereInputType)({ composer, concreteEntityAdapter });
    concreteEntityAdapter.annotations.vector.indexes.forEach((index) => {
        const vectorContext = {
            index,
            queryType: "query",
            queryName: index.queryName,
            scoreVariable: new cypher_builder_1.default.Variable(),
            vectorSettings: features?.vector || {},
        };
        const vectorArgs = {
            where: concreteEntityAdapter.operations.vectorTypeNames.where,
            sort: (0, vector_input_1.withVectorSortInputType)({ concreteEntityAdapter, composer }).NonNull.List,
            first: features?.limitRequired ? new graphql_1.GraphQLNonNull(graphql_1.GraphQLInt) : graphql_1.GraphQLInt,
            after: graphql_1.GraphQLString,
        };
        if (index.provider !== undefined || index.callback !== undefined) {
            vectorArgs["phrase"] = new graphql_1.GraphQLNonNull(graphql_1.GraphQLString);
        }
        else {
            vectorArgs["vector"] = new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat));
        }
        complexityEstimatorHelper.registerField("Query", index.queryName);
        composer.Query.addFields({
            [index.queryName]: {
                type: (0, vector_input_1.withVectorResultTypeConnection)({ composer, concreteEntityAdapter }).NonNull,
                resolve: (0, vector_1.vectorResolver)({ vectorContext, entityAdapter: concreteEntityAdapter }),
                args: vectorArgs,
            },
        });
    });
}
//# sourceMappingURL=vector.js.map