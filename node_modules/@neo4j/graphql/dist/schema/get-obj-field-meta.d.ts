import type { IResolvers } from "@graphql-tools/utils";
import type { InterfaceTypeDefinitionNode, ObjectTypeDefinitionNode } from "graphql";
import type { DefinitionCollection } from "../schema-model/parser/definition-collection";
import type { ConnectionField, CustomEnumField, CustomResolverField, CustomScalarField, CypherField, InterfaceField, Neo4jGraphQLCallbacks, ObjectField, PointField, PrimitiveField, RelationField, TemporalField, UnionField } from "../types";
export interface ObjectFields {
    relationFields: RelationField[];
    connectionFields: ConnectionField[];
    primitiveFields: PrimitiveField[];
    cypherFields: CypherField[];
    scalarFields: CustomScalarField[];
    enumFields: CustomEnumField[];
    unionFields: UnionField[];
    interfaceFields: InterfaceField[];
    objectFields: ObjectField[];
    temporalFields: TemporalField[];
    pointFields: PointField[];
    customResolverFields: CustomResolverField[];
}
export declare function getObjFieldMeta({ obj, definitionCollection, interfaces, callbacks, customResolvers, }: {
    obj: ObjectTypeDefinitionNode | InterfaceTypeDefinitionNode;
    definitionCollection: DefinitionCollection;
    interfaces: InterfaceTypeDefinitionNode[];
    callbacks?: Neo4jGraphQLCallbacks;
    customResolvers?: IResolvers | Array<IResolvers>;
}): ObjectFields;
//# sourceMappingURL=get-obj-field-meta.d.ts.map