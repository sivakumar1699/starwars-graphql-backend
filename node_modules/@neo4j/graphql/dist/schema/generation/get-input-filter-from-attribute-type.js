"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInputFilterFromAttributeType = getInputFilterFromAttributeType;
const BigIntScalarFilters_1 = require("../../graphql/input-objects/generic-operators/BigIntScalarFilters");
const BooleanScalarFilters_1 = require("../../graphql/input-objects/generic-operators/BooleanScalarFilters");
const CartesianPointFilters_1 = require("../../graphql/input-objects/generic-operators/CartesianPointFilters");
const DateScalarFilters_1 = require("../../graphql/input-objects/generic-operators/DateScalarFilters");
const DateTimeScalarFilters_1 = require("../../graphql/input-objects/generic-operators/DateTimeScalarFilters");
const DurationScalarFilters_1 = require("../../graphql/input-objects/generic-operators/DurationScalarFilters");
const FloatScalarFilters_1 = require("../../graphql/input-objects/generic-operators/FloatScalarFilters");
const IDScalarFilters_1 = require("../../graphql/input-objects/generic-operators/IDScalarFilters");
const IntScalarFilters_1 = require("../../graphql/input-objects/generic-operators/IntScalarFilters");
const LocalDateTimeScalarFilters_1 = require("../../graphql/input-objects/generic-operators/LocalDateTimeScalarFilters");
const LocalTimeScalarFilters_1 = require("../../graphql/input-objects/generic-operators/LocalTimeScalarFilters");
const PointFilters_1 = require("../../graphql/input-objects/generic-operators/PointFilters");
const StringScalarFilters_1 = require("../../graphql/input-objects/generic-operators/StringScalarFilters");
const TimeScalarFilters_1 = require("../../graphql/input-objects/generic-operators/TimeScalarFilters");
function getInputFilterFromAttributeType(attribute, features) {
    // NOTE: static types returned here must be added to schema-validation > validateUserDefinition
    if (attribute.typeHelper.isBoolean()) {
        if (attribute.typeHelper.isList()) {
            return BooleanScalarFilters_1.BooleanListFilters;
        }
        return BooleanScalarFilters_1.BooleanScalarFilters;
    }
    if (attribute.typeHelper.isID()) {
        if (attribute.typeHelper.isList()) {
            return IDScalarFilters_1.IDListFilters;
        }
        return (0, IDScalarFilters_1.getIDScalarFilters)(features);
    }
    if (attribute.typeHelper.isString()) {
        if (attribute.typeHelper.isList()) {
            return StringScalarFilters_1.StringListFilters;
        }
        return (0, StringScalarFilters_1.getStringScalarFilters)(features);
    }
    if (attribute.typeHelper.isInt()) {
        if (attribute.typeHelper.isList()) {
            return IntScalarFilters_1.IntListFilters;
        }
        return IntScalarFilters_1.IntScalarFilters;
    }
    if (attribute.typeHelper.isFloat()) {
        if (attribute.typeHelper.isList()) {
            return FloatScalarFilters_1.FloatListFilters;
        }
        return FloatScalarFilters_1.FloatScalarFilters;
    }
    if (attribute.typeHelper.isBigInt()) {
        if (attribute.typeHelper.isList()) {
            return BigIntScalarFilters_1.BigIntListFilters;
        }
        return BigIntScalarFilters_1.BigIntScalarFilters;
    }
    if (attribute.typeHelper.isTime()) {
        if (attribute.typeHelper.isList()) {
            return TimeScalarFilters_1.TimeListFilters;
        }
        return TimeScalarFilters_1.TimeScalarFilters;
    }
    if (attribute.typeHelper.isPoint()) {
        if (attribute.typeHelper.isList()) {
            return PointFilters_1.PointListFilters;
        }
        return PointFilters_1.PointFilters;
    }
    if (attribute.typeHelper.isCartesianPoint()) {
        if (attribute.typeHelper.isList()) {
            return CartesianPointFilters_1.CartesianPointListFilters;
        }
        return CartesianPointFilters_1.CartesianPointFilters;
    }
    if (attribute.typeHelper.isDateTime()) {
        if (attribute.typeHelper.isList()) {
            return DateTimeScalarFilters_1.DateTimeListFilters;
        }
        return DateTimeScalarFilters_1.DateTimeScalarFilters;
    }
    if (attribute.typeHelper.isLocalTime()) {
        if (attribute.typeHelper.isList()) {
            return LocalTimeScalarFilters_1.LocalTimeListFilters;
        }
        return LocalTimeScalarFilters_1.LocalTimeScalarFilters;
    }
    if (attribute.typeHelper.isLocalDateTime()) {
        if (attribute.typeHelper.isList()) {
            return LocalDateTimeScalarFilters_1.LocalDateTimeListFilters;
        }
        return LocalDateTimeScalarFilters_1.LocalDateTimeScalarFilters;
    }
    if (attribute.typeHelper.isDuration()) {
        if (attribute.typeHelper.isList()) {
            return DurationScalarFilters_1.DurationListFilters;
        }
        return DurationScalarFilters_1.DurationScalarFilters;
    }
    if (attribute.typeHelper.isDate()) {
        if (attribute.typeHelper.isList()) {
            return DateScalarFilters_1.DateListFilters;
        }
        return DateScalarFilters_1.DateScalarFilters;
    }
    if (attribute.typeHelper.isEnum()) {
        const filtersName = attribute.typeHelper.isList() ? "ListEnumScalarFilters" : "EnumScalarFilters";
        return `${attribute.getTypeName()}${filtersName}`;
    }
    if (attribute.typeHelper.isUserScalar()) {
        const filtersName = attribute.typeHelper.isList() ? "ListScalarFilters" : "ScalarFilters";
        return `${attribute.getTypeName()}${filtersName}`;
    }
    throw new Error(`No scalar filter found for attribute ${attribute.type.name}`);
}
//# sourceMappingURL=get-input-filter-from-attribute-type.js.map