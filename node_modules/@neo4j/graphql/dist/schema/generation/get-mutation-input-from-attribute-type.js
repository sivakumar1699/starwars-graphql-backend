"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMutationInputFromAttributeType = getMutationInputFromAttributeType;
const BigIntScalarMutations_1 = require("../../graphql/input-objects/generic-mutation-operations/BigIntScalarMutations");
const BooleanScalarMutations_1 = require("../../graphql/input-objects/generic-mutation-operations/BooleanScalarMutations");
const CartesianPointMutations_1 = require("../../graphql/input-objects/generic-mutation-operations/CartesianPointMutations");
const DateScalarMutations_1 = require("../../graphql/input-objects/generic-mutation-operations/DateScalarMutations");
const DateTimeScalarMutations_1 = require("../../graphql/input-objects/generic-mutation-operations/DateTimeScalarMutations");
const DurationScalarMutations_1 = require("../../graphql/input-objects/generic-mutation-operations/DurationScalarMutations");
const FloatScalarMutations_1 = require("../../graphql/input-objects/generic-mutation-operations/FloatScalarMutations");
const IDScalarMutations_1 = require("../../graphql/input-objects/generic-mutation-operations/IDScalarMutations");
const IntScalarMutations_1 = require("../../graphql/input-objects/generic-mutation-operations/IntScalarMutations");
const LocalDateTimeScalarMutations_1 = require("../../graphql/input-objects/generic-mutation-operations/LocalDateTimeScalarMutations");
const LocalTimeScalarMutations_1 = require("../../graphql/input-objects/generic-mutation-operations/LocalTimeScalarMutations");
const PointMutations_1 = require("../../graphql/input-objects/generic-mutation-operations/PointMutations");
const StringScalarMutations_1 = require("../../graphql/input-objects/generic-mutation-operations/StringScalarMutations");
const TimeScalarMutations_1 = require("../../graphql/input-objects/generic-mutation-operations/TimeScalarMutations");
function getMutationInputFromAttributeType(attribute) {
    // // NOTE: static types returned here must be added to schema-validation > validateUserDefinition
    if (attribute.typeHelper.isBoolean()) {
        if (attribute.typeHelper.isList()) {
            return BooleanScalarMutations_1.BooleanListMutations;
        }
        return BooleanScalarMutations_1.BooleanScalarMutations;
    }
    if (attribute.typeHelper.isID()) {
        if (attribute.typeHelper.isList()) {
            return IDScalarMutations_1.IDListMutations;
        }
        return IDScalarMutations_1.IDScalarMutations;
    }
    if (attribute.typeHelper.isString()) {
        if (attribute.typeHelper.isList()) {
            return StringScalarMutations_1.StringListMutations;
        }
        return StringScalarMutations_1.StringScalarMutations;
    }
    if (attribute.typeHelper.isInt()) {
        if (attribute.typeHelper.isList()) {
            return IntScalarMutations_1.IntListMutations;
        }
        return IntScalarMutations_1.IntScalarMutations;
    }
    if (attribute.typeHelper.isFloat()) {
        if (attribute.typeHelper.isList()) {
            return FloatScalarMutations_1.FloatListMutations;
        }
        return FloatScalarMutations_1.FloatScalarMutations;
    }
    if (attribute.typeHelper.isBigInt()) {
        if (attribute.typeHelper.isList()) {
            return BigIntScalarMutations_1.BigIntListMutations;
        }
        return BigIntScalarMutations_1.BigIntScalarMutations;
    }
    if (attribute.typeHelper.isTime()) {
        if (attribute.typeHelper.isList()) {
            return TimeScalarMutations_1.TimeListMutations;
        }
        return TimeScalarMutations_1.TimeScalarMutations;
    }
    if (attribute.typeHelper.isPoint()) {
        if (attribute.typeHelper.isList()) {
            return PointMutations_1.PointListMutations;
        }
        return PointMutations_1.PointMutations;
    }
    if (attribute.typeHelper.isCartesianPoint()) {
        if (attribute.typeHelper.isList()) {
            return CartesianPointMutations_1.CartesianPointListMutations;
        }
        return CartesianPointMutations_1.CartesianPointMutations;
    }
    if (attribute.typeHelper.isDateTime()) {
        if (attribute.typeHelper.isList()) {
            return DateTimeScalarMutations_1.DateTimeListMutations;
        }
        return DateTimeScalarMutations_1.DateTimeScalarMutations;
    }
    if (attribute.typeHelper.isLocalTime()) {
        if (attribute.typeHelper.isList()) {
            return LocalTimeScalarMutations_1.LocalTimeListMutations;
        }
        return LocalTimeScalarMutations_1.LocalTimeScalarMutations;
    }
    if (attribute.typeHelper.isLocalDateTime()) {
        if (attribute.typeHelper.isList()) {
            return LocalDateTimeScalarMutations_1.LocalDateTimeListMutations;
        }
        return LocalDateTimeScalarMutations_1.LocalDateTimeScalarMutations;
    }
    if (attribute.typeHelper.isDuration()) {
        if (attribute.typeHelper.isList()) {
            return DurationScalarMutations_1.DurationListMutations;
        }
        return DurationScalarMutations_1.DurationScalarMutations;
    }
    if (attribute.typeHelper.isDate()) {
        if (attribute.typeHelper.isList()) {
            return DateScalarMutations_1.DateListMutations;
        }
        return DateScalarMutations_1.DateScalarMutations;
    }
    if (attribute.typeHelper.isEnum()) {
        if (attribute.typeHelper.isList()) {
            return `${attribute.getTypeName()}ListEnumScalarMutations`;
        }
        return `${attribute.getTypeName()}EnumScalarMutations`;
    }
    if (attribute.typeHelper.isUserScalar()) {
        if (attribute.typeHelper.isList()) {
            return `${attribute.getTypeName()}ListScalarMutations`;
        }
        return `${attribute.getTypeName()}ScalarMutations`;
    }
    throw new Error(`No scalar mutation found for attribute ${attribute.type.name}`);
}
//# sourceMappingURL=get-mutation-input-from-attribute-type.js.map