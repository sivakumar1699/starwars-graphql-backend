"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEPRECATE_SET_MUTATION = DEPRECATE_SET_MUTATION;
exports.DEPRECATE_ARRAY_MUTATIONS = DEPRECATE_ARRAY_MUTATIONS;
exports.DEPRECATE_MATH_MUTATIONS = DEPRECATE_MATH_MUTATIONS;
exports.DEPRECATE_AGGREGATION_FILTERS = DEPRECATE_AGGREGATION_FILTERS;
exports.DEPRECATE_AGGREGATION = DEPRECATE_AGGREGATION;
exports.DEPRECATE_NESTED_AGGREGATION = DEPRECATE_NESTED_AGGREGATION;
exports.DEPRECATE_UPDATE_WHERE = DEPRECATE_UPDATE_WHERE;
const constants_1 = require("../constants");
// TODO: Add constant deprecations here
function DEPRECATE_SET_MUTATION(name) {
    return {
        name: constants_1.DEPRECATED,
        args: {
            reason: `Please use the generic mutation '${name}: { set: ... } }' instead.`,
        },
    };
}
function DEPRECATE_ARRAY_MUTATIONS(name, operation) {
    return {
        name: constants_1.DEPRECATED,
        args: {
            reason: `Please use the generic mutation '${name}: { ${operation}: ... } }' instead.`,
        },
    };
}
function DEPRECATE_MATH_MUTATIONS(name, operation) {
    return {
        name: constants_1.DEPRECATED,
        args: {
            reason: `Please use the relevant generic mutation '${name}: { ${operation}: ... } }' instead.`,
        },
    };
}
function DEPRECATE_AGGREGATION_FILTERS(name, aggregationOperation, operator) {
    let newOperator = operator.toLowerCase();
    if (newOperator === "equal") {
        newOperator = "eq";
    }
    return {
        name: constants_1.DEPRECATED,
        args: {
            reason: `Please use the relevant generic filter '${name}: { ${aggregationOperation}: { ${newOperator}: ... } } }' instead.`,
        },
    };
}
function DEPRECATE_AGGREGATION(entity) {
    return {
        name: constants_1.DEPRECATED,
        args: {
            reason: `Please use the explicit field "aggregate" inside "${entity.operations.rootTypeFieldNames.connection}" instead`,
        },
    };
}
function DEPRECATE_NESTED_AGGREGATION(relationship) {
    return {
        name: constants_1.DEPRECATED,
        args: {
            reason: `Please use field "aggregate" inside "${relationship.operations.connectionFieldName}" instead`,
        },
    };
}
function DEPRECATE_UPDATE_WHERE(relationship, ifUnionMemberEntity) {
    return {
        name: constants_1.DEPRECATED,
        args: {
            reason: `Please use field "where" inside "${relationship.operations.getUpdateConnectionInputTypename(ifUnionMemberEntity)}" instead`,
        },
    };
}
//# sourceMappingURL=constants.js.map