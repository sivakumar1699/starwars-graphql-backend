"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidUnionType = ValidUnionType;
const graphql_1 = require("graphql");
const document_validation_error_1 = require("../utils/document-validation-error");
const is_node_type_1 = require("../utils/location-helpers/is-node-type");
function ValidUnionType(context) {
    const typeMapWithExtensions = context.typeMapWithExtensions;
    if (!typeMapWithExtensions) {
        throw new Error("No typeMapWithExtensions found in the validation context");
    }
    return {
        UnionTypeDefinition(unionType) {
            const { isValid, errorMsg } = (0, document_validation_error_1.assertValid)(() => {
                let hasNodeTypes = false;
                let hasNonNodeTypes = false;
                for (const concreteType of unionType.types ?? []) {
                    const concreteTypeFileName = concreteType.name.value;
                    const type = typeMapWithExtensions[concreteTypeFileName];
                    if (!type) {
                        throw new Error(`Type ${concreteTypeFileName} not found in validation`);
                    }
                    if (type.definition && type.definition.kind === graphql_1.Kind.OBJECT_TYPE_DEFINITION) {
                        const isConcreteTypeANode = (0, is_node_type_1.typeIsANodeType)({
                            objectTypeDefinitionNode: type.definition,
                            typeMapWithExtensions,
                        });
                        if (isConcreteTypeANode) {
                            hasNodeTypes = true;
                        }
                        else {
                            hasNonNodeTypes = true;
                        }
                    }
                }
                if (hasNodeTypes && hasNonNodeTypes) {
                    throw new document_validation_error_1.DocumentValidationError("Union needs to be fully implemented by `@node` types or no type in the union have the `@node` directive.", []);
                }
            });
            if (!isValid) {
                context.reportError((0, document_validation_error_1.createGraphQLError)({
                    nodes: [unionType],
                    errorMsg,
                }));
            }
        },
    };
}
//# sourceMappingURL=valid-union-type.js.map