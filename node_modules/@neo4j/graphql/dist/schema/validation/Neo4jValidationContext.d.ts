import type { Maybe } from "@graphql-tools/utils";
import type { DocumentNode, EnumTypeDefinitionNode, GraphQLError, GraphQLSchema, InterfaceTypeDefinitionNode, InterfaceTypeExtensionNode, ObjectTypeDefinitionNode, ObjectTypeExtensionNode, UnionTypeDefinitionNode, UnionTypeExtensionNode } from "graphql";
import { SDLValidationContext } from "graphql/validation/ValidationContext";
export type TypeMapWithExtensions = Record<string, {
    extensions: (ObjectTypeExtensionNode | InterfaceTypeExtensionNode | UnionTypeExtensionNode)[];
    definition: ObjectTypeDefinitionNode | InterfaceTypeDefinitionNode | UnionTypeDefinitionNode | EnumTypeDefinitionNode;
}>;
export declare class Neo4jValidationContext extends SDLValidationContext {
    readonly typeMapWithExtensions?: TypeMapWithExtensions;
    readonly interfacesMap?: Record<string, Array<ObjectTypeDefinitionNode>>;
    readonly callbacks?: any;
    constructor(ast: DocumentNode, schema: Maybe<GraphQLSchema>, onError: (error: GraphQLError) => void, callbacks?: any);
}
//# sourceMappingURL=Neo4jValidationContext.d.ts.map