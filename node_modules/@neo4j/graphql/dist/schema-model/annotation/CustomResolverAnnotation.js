"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomResolverAnnotation = void 0;
const graphql_1 = require("graphql");
const get_custom_resolver_meta_1 = require("../../schema/get-custom-resolver-meta");
const definition_collection_1 = require("../parser/definition-collection");
class CustomResolverAnnotation {
    constructor({ requires }) {
        this.name = "customResolver";
        this.requires = requires;
    }
    parseRequire(document, objectFields) {
        if (!this.requires) {
            return;
        }
        const definitionCollection = (0, definition_collection_1.getDefinitionCollection)(document);
        const { interfaceTypes, objectTypes, unionTypes } = definitionCollection;
        const selectionSetDocument = (0, graphql_1.parse)(`{ ${this.requires} }`);
        // TODO: likely selectionSetToResolveTree could be change to accept Maps instead of Arrays.
        // initially these were arrays as they were coming from getDefinitionNodes that was returning arrays
        this.parsedRequires = (0, get_custom_resolver_meta_1.selectionSetToResolveTree)(objectFields || [], [...objectTypes.values()], [...interfaceTypes.values()], [...unionTypes.values()], selectionSetDocument);
    }
}
exports.CustomResolverAnnotation = CustomResolverAnnotation;
//# sourceMappingURL=CustomResolverAnnotation.js.map