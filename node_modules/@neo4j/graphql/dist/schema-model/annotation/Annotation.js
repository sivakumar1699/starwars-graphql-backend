"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.annotationsParsers = void 0;
const authentication_annotation_1 = require("../parser/annotations-parser/authentication-annotation");
const authorization_annotation_1 = require("../parser/annotations-parser/authorization-annotation");
const coalesce_annotation_1 = require("../parser/annotations-parser/coalesce-annotation");
const custom_resolver_annotation_1 = require("../parser/annotations-parser/custom-resolver-annotation");
const cypher_annotation_1 = require("../parser/annotations-parser/cypher-annotation");
const default_annotation_1 = require("../parser/annotations-parser/default-annotation");
const filterable_annotation_1 = require("../parser/annotations-parser/filterable-annotation");
const full_text_annotation_1 = require("../parser/annotations-parser/full-text-annotation");
const jwt_claim_annotation_1 = require("../parser/annotations-parser/jwt-claim-annotation");
const key_annotation_1 = require("../parser/annotations-parser/key-annotation");
const limit_annotation_1 = require("../parser/annotations-parser/limit-annotation");
const mutation_annotation_1 = require("../parser/annotations-parser/mutation-annotation");
const plural_annotation_1 = require("../parser/annotations-parser/plural-annotation");
const populated_by_annotation_1 = require("../parser/annotations-parser/populated-by-annotation");
const query_annotation_1 = require("../parser/annotations-parser/query-annotation");
const selectable_annotation_1 = require("../parser/annotations-parser/selectable-annotation");
const settable_annotation_1 = require("../parser/annotations-parser/settable-annotation");
const sortable_annotation_1 = require("../parser/annotations-parser/sortable-annotation");
const subscription_annotation_1 = require("../parser/annotations-parser/subscription-annotation");
const subscriptions_authorization_annotation_1 = require("../parser/annotations-parser/subscriptions-authorization-annotation");
const timestamp_annotation_1 = require("../parser/annotations-parser/timestamp-annotation");
const vector_annotation_1 = require("../parser/annotations-parser/vector-annotation");
const IDAnnotation_1 = require("./IDAnnotation");
const JWTPayloadAnnotation_1 = require("./JWTPayloadAnnotation");
const PrivateAnnotation_1 = require("./PrivateAnnotation");
const RelayIDAnnotation_1 = require("./RelayIDAnnotation");
exports.annotationsParsers = {
    authentication: authentication_annotation_1.parseAuthenticationAnnotation,
    authorization: authorization_annotation_1.parseAuthorizationAnnotation,
    coalesce: coalesce_annotation_1.parseCoalesceAnnotation,
    customResolver: custom_resolver_annotation_1.parseCustomResolverAnnotation,
    cypher: cypher_annotation_1.parseCypherAnnotation,
    default: default_annotation_1.parseDefaultAnnotation,
    filterable: filterable_annotation_1.parseFilterableAnnotation,
    fulltext: full_text_annotation_1.parseFulltextAnnotation,
    id: () => new IDAnnotation_1.IDAnnotation(),
    jwtClaim: jwt_claim_annotation_1.parseJWTClaimAnnotation,
    jwt: () => new JWTPayloadAnnotation_1.JWTPayloadAnnotation(),
    key: key_annotation_1.parseKeyAnnotation,
    mutation: mutation_annotation_1.parseMutationAnnotation,
    plural: plural_annotation_1.parsePluralAnnotation,
    populatedBy: populated_by_annotation_1.parsePopulatedByAnnotation,
    private: () => new PrivateAnnotation_1.PrivateAnnotation(),
    query: query_annotation_1.parseQueryAnnotation,
    limit: limit_annotation_1.parseLimitAnnotation,
    selectable: selectable_annotation_1.parseSelectableAnnotation,
    settable: settable_annotation_1.parseSettableAnnotation,
    sortable: sortable_annotation_1.parseSortableAnnotation,
    subscription: subscription_annotation_1.parseSubscriptionAnnotation,
    subscriptionsAuthorization: subscriptions_authorization_annotation_1.parseSubscriptionsAuthorizationAnnotation,
    timestamp: timestamp_annotation_1.parseTimestampAnnotation,
    relayId: () => new RelayIDAnnotation_1.RelayIDAnnotation(),
    vector: vector_annotation_1.parseVectorAnnotation,
};
//# sourceMappingURL=Annotation.js.map