"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConcreteEntityOperations = void 0;
const ImplementingEntityOperations_1 = require("./ImplementingEntityOperations");
class ConcreteEntityOperations extends ImplementingEntityOperations_1.ImplementingEntityOperations {
    constructor(concreteEntityAdapter) {
        super(concreteEntityAdapter);
    }
    get relationshipsSubscriptionWhereInputTypeName() {
        return `${this.entityAdapter.name}RelationshipsSubscriptionWhere`;
    }
    // top-level connection type name
    get connectionFieldTypename() {
        return `${this.pascalCasePlural}Connection`;
    }
    // top-level connection edge type name, TODO: find a better name (this is coming from the RelationshipOperations)
    get relationshipFieldTypename() {
        return `${this.entityAdapter.name}Edge`;
    }
    get rootTypeFieldNames() {
        return {
            ...super.rootTypeFieldNames,
            subscribe: {
                created: `${this.entityAdapter.singular}Created`,
                updated: `${this.entityAdapter.singular}Updated`,
                deleted: `${this.entityAdapter.singular}Deleted`,
            },
        };
    }
    get fulltextTypeNames() {
        return {
            connection: `${this.pascalCasePlural}IndexConnection`,
            edge: `${this.pascalCaseSingular}IndexEdge`,
            where: `${this.pascalCaseSingular}IndexWhere`,
            sort: `${this.pascalCaseSingular}IndexSort`,
        };
    }
    get vectorTypeNames() {
        return {
            connection: `${this.pascalCasePlural}IndexConnection`,
            edge: `${this.pascalCaseSingular}IndexEdge`,
            where: `${this.pascalCaseSingular}IndexWhere`,
            sort: `${this.pascalCaseSingular}IndexSort`,
        };
    }
}
exports.ConcreteEntityOperations = ConcreteEntityOperations;
//# sourceMappingURL=ConcreteEntityOperations.js.map