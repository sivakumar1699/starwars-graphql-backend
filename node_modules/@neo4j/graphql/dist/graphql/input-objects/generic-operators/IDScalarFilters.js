"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IDListFilters = void 0;
exports.getIDScalarFilters = getIDScalarFilters;
const graphql_1 = require("graphql");
function getIDScalarFilters(features) {
    const fields = {
        eq: {
            type: graphql_1.GraphQLID,
        },
        in: { type: new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLID)) },
        contains: { type: graphql_1.GraphQLID },
        endsWith: { type: graphql_1.GraphQLID },
        startsWith: { type: graphql_1.GraphQLID },
    };
    for (const filter of Object.entries(features?.filters?.ID ?? {})) {
        const [filterName, isEnabled] = filter;
        if (isEnabled) {
            switch (filterName) {
                case "MATCHES":
                    fields["matches"] = { type: graphql_1.GraphQLID };
                    break;
                case "GT":
                    fields["gt"] = { type: graphql_1.GraphQLID };
                    break;
                case "GTE":
                    fields["gte"] = { type: graphql_1.GraphQLID };
                    break;
                case "LT":
                    fields["lt"] = { type: graphql_1.GraphQLID };
                    break;
                case "LTE":
                    fields["lte"] = { type: graphql_1.GraphQLID };
                    break;
            }
        }
    }
    return new graphql_1.GraphQLInputObjectType({
        name: "IDScalarFilters",
        description: "ID filters",
        fields,
    });
}
exports.IDListFilters = new graphql_1.GraphQLInputObjectType({
    name: "IDListFilters",
    description: "ID list filters",
    fields: {
        eq: { type: new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(graphql_1.GraphQLID)) },
        includes: { type: graphql_1.GraphQLID },
    },
});
//# sourceMappingURL=IDScalarFilters.js.map